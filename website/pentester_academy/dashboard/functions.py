#This is used to get data from the website !
from bs4 import BeautifulSoup
import requests
from course.models import Course
from django.db.models import Sum,Count
from django.db.models import CharField, Case, Value, When, Sum, IntegerField

def newUpdateDatabase():
    # dataFile = open(pentesterDatabasePath,'w')
    pentesterAcademyURL ='https://www.pentesteracademy.com'
    courseVideoList=[]
    for i in range(1,100,1):
        courseUrl = pentesterAcademyURL+"/course?id="+str(i)
        # print ("Trying courseUrl as {}".format(courseUrl))
        try:
            resp = requests.get(courseUrl)
            soup = BeautifulSoup(resp.text,'lxml')
            title = soup.find('title').text
            # print ("The title is {}".format(title))
            videos= soup.find_all("h4",{"class":"media-heading"})
            # print (videos)
            for video in videos:
                # print ("The video name is {}".format(video))
                dataFile.write( smart_str(title.replace('/','-')) + "%" + smart_str(video.text) )
                dataFile.write("\n")
        except KeyboardInterrupt:
            printKeyBoardInterrupt()
        except:
             print("Unexpected error:", sys.exc_info())
    dataFile.close()
    print("The database is updated")

def getMetrics():
    #Total Courses
    #Total Courses Completed
    #Total Duration
    #Total Duration Completed
    #Total Courses Downloaded
    all_courses = course.objects.values('course_name').annotate(Sum('duration')).annotate(Sum('completed')).annotate(Count('video_name')).annotate(Sum('downloaded')).annotate(td=Sum(Case(When(completed=0,then='duration'))))
    for c in all_courses:
        print (c)

    # course.objects.aggregate(td=Sum(Case(When(completed=0,then='duration'),output_field=IntegerField())))



    # 'courseStart':0,
    # 'courseEnd':40,
    # 'coursePercent':0.4,
    # 'courseMessage':["I","Am","a"],
    # 'videoStart':10,
    # 'videoEnd':20,
    # 'videoPercent':0.6,
    # 'durationStart':15,
    # 'durationEnd':150,
    # 'durationPercent':0.2,
    # 'downloadStart':1120,
    # 'downloadEnd':1540,
    # 'downloadPercent':0.9,
    # 'lab1Start':10,
    # 'lab1End':50,
    # 'lab1Percent':0.5,
    # 'lab2Start':120,
    # 'lab2End':370,
    # 'lab2Percent':0.2,
    total_completed = 0
    total_duration = 0
    total_downloads=0
    total_videos = 0
    # {'course_name': 'Python For Pentesters', 'duration__sum': 30, 'completed__sum': 1, 'video_name__count': 2}
    total_courses = len(all_courses)
    for c in all_courses:
        if (c['completed__sum']==c['video_name__count']):
            print ("Course is Completed !")
            total_completed += 1
        total_duration += c['duration__sum']
        total_downloads += c['downloaded__sum']
        total_videos += c['video_name__count']

    #Setting up responses
    courseStart = total_completed
    courseEnd = total_courses
    coursePercent = total_completed/total_courses

    durationEnd=total_duration

    downloadStart= total_downloads

    video_end= total_videos
    print ("Total Completed : {} \nTotal Courses : {} \n Total Duration: {}\n Total Downloads: {}\n".format(total_completed,total_courses,total_duration,total_downloads))
