from course.models import Course
from django.db.models import Case, Value, When, Sum ,Count,IntegerField
from lab.models import Labs
from datetime import datetime
import math
#Global Variables !
date_format = "%m/%d/%Y"
startDate=datetime.strptime('4/09/2020', date_format)
endDate=datetime.strptime('4/09/2021', date_format)
today=datetime.today()
daysLeft = (endDate-today).days
daysGone = (today-startDate).days

class BasicObject:
    def __init__(self,start,end):
        self.start=start
        self.end=end
        if end !=0:
            self.percent=start/end
        else:
            self.percent = 0
        try:
            daysReq = math.ceil((daysGone/self.start)*(self.end-self.start))
        except:
            daysReq = daysLeft
        self.message="Estimated Days Required : "+str(daysReq)
class Metrics:
    def __init__(self,cour,video,duration,download,lab1,lab2):
        self.cour = cour
        self.video = video
        self.duration = duration
        self.download = download
        self.lab1 = lab1
        self.lab2 = lab2

def getMetrics():
    #What are we going to get back
    # course_name ,
    all_metrics = Course.objects.values('course_name').annotate(tdur=Sum('duration')).annotate(tc=Sum('completed')).annotate(tv=Count('video_name')).annotate(tdow=Sum('downloaded')).annotate(tcdur=Sum(Case(When(completed=1,then='duration')))).annotate(tcv=Count(Case(When(completed=1,then=1))))
    total_completed = 0
    total_duration = 0
    total_downloads=0
    total_videos = 0
    total_completed_videos=0
    total_completed_duration=0
    total_courses = len(all_metrics)

    for m in all_metrics:
        if m['tc']==m['tv']:
            total_completed += 1
        total_duration += m['tdur']
        total_downloads+= m['tdow']
        total_videos += m['tv']
        total_completed_videos += m['tcv']
        try:
            tcd = int(m['tcdur'])
        except:
            tcd = 0
        total_completed_duration+= tcd

    courseObject=BasicObject(total_completed,total_courses)
    videosObject=BasicObject(total_completed_videos,total_videos)
    durationObject=BasicObject(total_completed_duration,total_duration)
    downloadObject=BasicObject(total_downloads,total_videos)

    #Now that all labs are done, let us specify stats for the labs too !
    total_labs = len(Labs.objects.all())
    total_labs_completed = Labs.objects.aggregate(tc =Sum('completed'))
    total_labs_completed = total_labs_completed['tc']

    lab_by_course = Labs.objects.values('course_name').annotate(ts=Sum('completed')).annotate(tc=Count('lab_name'))
    total_lab_by_course=len(lab_by_course)
    total = 0
    for l in lab_by_course:
        if l["ts"]==l["tc"]:
            total +=1
    lab1Object=BasicObject(total,total_lab_by_course)
    lab2Object=BasicObject(total_labs_completed,total_labs)
    metricObject = Metrics(courseObject,videosObject,durationObject,downloadObject,lab1Object,lab2Object)
    return metricObject
