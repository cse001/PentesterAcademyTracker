from django.shortcuts import redirect,render
import requests
import sys
from bs4 import BeautifulSoup
from django.utils.encoding import smart_str
from .models import Course,LastWatched
from django.db.models import Case, Value, When, Sum ,Count,IntegerField
import os,sys
import moviepy.editor
import subprocess
#Global Variables
pentestFolder = '/home/tipsy/Warehouse/Tutorials/PentesterAcademy'


#We have created a fileDict so that we don't lose the original name during renaming
def getFiles(path):
    fileList = []
    fileDict = {}
    try:
        listOfFiles = os.listdir(pentestFolder+"/"+path)
        for file in listOfFiles:
            if file.strip().endswith('.mp4') or file.strip().endswith('.m4v'):
                fileList.append(file)
                cleanedFileList = cleaning_for_comparison(fileList)
                for i in range(len(fileList)):
                    name = fileDict.get(cleanedFileList[i],fileList[i])
                    fileDict[cleanedFileList[i]]=fileList[i]
    except:
        print ("Directory Not found")
    return fileList,fileDict
def cleaning_for_comparison(fList):
    cleanList = []
    for f in fList:
        # cleanedF = f.replace(' ','_')
        # cleanedF = cleanedF.replace(':','_')
        # cleanedF = cleanedF.replace('/','_')
        # cleanedF = cleanedF.replace('-','_')
        # cleanedF = cleanedF.replace('.mp4','')
        # cleanedF = cleanedF.replace('.m4v','_')
        # cleanedF = cleanedF.replace('__','_')
        # cleanedF = cleanedF.replace('__','_')
        # cleanedF = cleanedF.lower()
        # cleanedF = cleanedF.rstrip('_')
        cleanedF = cleanFunction(f)
        cleanList.append(cleanedF)
    return cleanList
def cleanFunction(name):
    cleanedName = name.strip()
    cleanedName = cleanedName.replace(' ','_')
    cleanedName = cleanedName.replace(':','_')
    cleanedName = cleanedName.replace('/','_')
    cleanedName = cleanedName.replace('-','_')
    cleanedName = cleanedName.replace('.mp4','')
    cleanedName = cleanedName.replace('.m4v','_')
    cleanedName = cleanedName.replace('__','_')
    cleanedName = cleanedName.replace('__','_')
    cleanedName = cleanedName.lower()
    cleanedName = cleanedName.rstrip('_')
    cleanedName = cleanedName.replace('__', '')
    return cleanedName
def convert(seconds):
    mins = seconds // 60
    seconds %= 60
    if seconds >=30:
        mins+=1
    return mins
#These 3 are utility functions
def updateAllCourseDetails(request):
    courseObjects = Course.objects.values('course_name').distinct();
    for course in courseObjects:
        cname = course['course_name']
        print(cname)
        status = updateCourse(cname)
    return redirect('courseIndex')

def updateCourse(course_name):
    fileList,fileDict = getFiles(course_name)
    fileList,fileDict=getFiles(course_name)
    cleanedFileList=cleaning_for_comparison(fileList)
    print (len(cleanedFileList))
    course_details=Course.objects.filter(course_name=course_name)
    for c in course_details:
        c.downloaded = 0
        vname = c.video_name
        vname = cleanFunction(vname)
        for cleanFile in cleanedFileList:
            if vname in cleanFile:
                c.file_name = fileDict[cleanFile]
                c.downloaded=1
                try:
                    video = moviepy.editor.VideoFileClip(pentestFolder+"/"+course_name+"/"+fileDict[cleanFile])
                    video_duration = int(video.duration)
                    c.duration = convert(video_duration)
                except:
                    c.duration = 0
                    print ("Check the following video : {}".format(c.file_name))
        c.save()
    return 1

def updateCompletionStatus(request,course_name,video_name,status):
    course_changed = Course.objects.get(course_name=course_name,video_name=video_name)
    course_changed.completed = int(status)
    course_changed.save()
    return redirect('courseDetails',course_name)
def open_video(request,course_name,file_name):
    src = pentestFolder+"/"+course_name+"/"+file_name
    obj,created=LastWatched.objects.get_or_create(course_name=course_name)
    obj.video_name = file_name
    obj.save()
    subprocess.Popen(['vlc',src])
    return redirect('courseDetails',course_name)

def index(request):
    metrics = Course.objects.values('course_name').annotate(tdur=Sum('duration')).annotate(tc=Sum('completed')).annotate(tv=Count('video_name')).annotate(tdow=Sum('downloaded')).annotate(tcdur=Sum(Case(When(completed=1,then='duration')))).annotate(tcv=Count(Case(When(completed=1,then=1))))
    context={
    'metrics':metrics,
    }
    return render(request,'course/index.html',context)

def updateCourseDetails(request,course_name):
    updateCourse(course_name)
    return redirect('courseDetails',course_name)

def details(request,course_name):
    course_details=Course.objects.filter(course_name=course_name)
    last_watched = LastWatched.objects.get_or_create(course_name = course_name)
    context={
        "last_watched":last_watched,
        "course_details":course_details,
        "course_name":course_name,
    }
    return render(request,'course/details.html',context)
def update(request):
    action = request.GET['action']
    pentesterAcademyURL ='https://www.pentesteracademy.com'
    if str(action) == "true":
        #This is where we will update the database !
        courseVideoList=[]
        for i in range(1,100,1):
            courseUrl = pentesterAcademyURL+"/course?id="+str(i)
            # print ("Trying courseUrl as {}".format(courseUrl))
            try:
                resp = requests.get(courseUrl)
                soup = BeautifulSoup(resp.text,'lxml')
                title = soup.find('title').text
                # print ("The title is {}".format(title))
                videos= soup.find_all("h4",{"class":"media-heading"})
                # print (videos)
                for video in videos:
                    # print ("The video name is {}".format(video))
                    course_name = smart_str(title.replace('/','-'))
                    video_name = smart_str(video.text)
                    video_name = video_name.strip()
                    video_name = video_name.replace('/','-')
                    video_url = video.find('a')
                    video_url = video_url['href']
                    obj,created=Course.objects.get_or_create(course_name=course_name,video_name=video_name)
                    if created:
                        obj.video_url=pentesterAcademyURL+"/"+video_url
                        obj.save()
                    else:
                        obj.video_url=pentesterAcademyURL+"/"+video_url
                        obj.save()
                    # dataFile.write( smart_str(title.replace('/','-')) + "%" + smart_str(video.text) )
                    # dataFile.write("\n")
            except KeyboardInterrupt:
                printKeyBoardInterrupt()
            except:
                 print("Unexpected error:",sys.exc_info())
        print("The database is updated")
        return redirect('http://localhost:8000/dashboard?msg1=Completed')
    else:
        return redirect('https://google.com')
    return HttpResponse("Hello, world. You're at the Course index.\n"+price_lte)
